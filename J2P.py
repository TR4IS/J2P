#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.1
#  in conjunction with Tcl version 8.6
#    Oct 01, 2025 12:25:15 PM %z  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path
from tkinter import Scrollbar

_location = os.path.dirname(__file__)

import J2P_support

_bgcolor = '#d9d9d9'
_fgcolor = '#000000'
_tabfg1 = 'black' 
_tabfg2 = 'white' 
_bgmode = 'light' 
_tabbg1 = '#d9d9d9' 
_tabbg2 = 'gray40' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran: return        
    try: J2P_support.root.tk.call('source',
                os.path.join(_location, 'themes', 'default.tcl'))
    except: pass
    style = ttk.Style()
    style.theme_use('default')
    style.configure('.', font = "TkDefaultFont")
    if sys.platform == "win32":
       style.theme_use('winnative')    
    _style_code_ran = 1

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("320x266+778+304")
        top.minsize(320, 266)
        top.maxsize(3844, 1061)
        top.resizable(1,  1)
        top.title("J2P")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="#000000")



        self.top = top

        self.Labelframe1 = tk.LabelFrame(self.top)
        self.Labelframe1.place(relx=0.033, rely=0.023, relheight=0.94
                , relwidth=0.915)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(foreground="#000000")
        self.Labelframe1.configure(text='''J2P''')
        self.Labelframe1.configure(background="#d9d9d9")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="#000000")

        self.Frame1 = tk.Frame(self.Labelframe1)
        self.Frame1.place(relx=0.036, rely=0.6, relheight=0.356, relwidth=0.911
                , bordermode='ignore')
        self.Frame1.configure(relief='groove')

        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="#000000")

        self.Label2 = tk.Label(self.Frame1)
        self.Label2.place(relx=0.090, rely=0.101, height=13, width=129)
        self.Label2.configure(activebackground="#d9d9d9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(anchor='w')
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(compound='left')
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="#000000")
        self.Label2.configure(text='''Name of PDF file :''')

        self.Entry1 = tk.Entry(self.Frame1)
        self.Entry1.place(relx=0.100, rely=0.315, height=20, relwidth=0.8)
        self.Entry1.configure(background="#d9d9d9")
        self.Entry1.configure(cursor="fleur")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(exportselection="0")
        self.Entry1.configure(font="TkDefaultFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="#000000")
        self.Entry1.configure(insertbackground="#000000")
        self.Entry1.configure(selectbackground="#d9d9d9")
        self.Entry1.configure(selectforeground="black")
        self.Entry1_tooltip = \
        ToolTip(self.Entry1, '''leave empty for default name''')

        _style_code()
        self.TButton2 = ttk.Button(self.Frame1)
        self.TButton2.place(relx=0.100, rely=0.629, relwidth=0.264, relheight=0.3)
        self.TButton2.configure(takefocus="")
        self.TButton2.configure(text='''Select''')
        self.TButton2.configure(compound='left')

        self.TButton1 = ttk.Button(self.Frame1)
        self.TButton1.place(relx=0.640, rely=0.629, relwidth=0.264, relheight=0.3)
        self.TButton1.configure(takefocus="")
        self.TButton1.configure(text='''Convert''')
        self.TButton1.configure(compound='left')

        self.Frame2 = tk.LabelFrame(self.Labelframe1)
        self.Frame2.place(relx=0.036, rely=0.084, relheight=0.46, relwidth=0.911, bordermode='ignore')
        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="groove")
        self.Frame2.configure(background="#d9d9d9")
        self.Frame2.configure(highlightbackground="#d9d9d9")
        self.Frame2.configure(highlightcolor="#000000")
        self.Frame2.configure(text='''Selected Files :''')


        self.ListBox = tk.Text(self.Frame2)
        self.ListBox.place(relx=0.039, rely=0.087, relwidth=0.9, relheight=0.8)
        self.ListBox.configure(background="#d9d9d9")
        self.ListBox.configure(foreground="#000000")
        self.ListBox.configure(highlightbackground="#d9d9d9")
        self.ListBox.configure(highlightcolor="#000000")  
        self.ListBox.configure(font="TkDefaultFont")
            

        self.TButton3 = ttk.Button(self.Frame1)
        self.TButton3.place(relx=0.37, rely=0.629, relwidth=0.264, relheight=0.3)
        self.TButton3.configure(takefocus="")
        self.TButton3.configure(text='''Clear''')
        self.TButton3.configure(compound='left')


from time import time, localtime, strftime
class ToolTip(tk.Toplevel):
    """ Provides a ToolTip widget for Tkinter. """
    def __init__(self, wdgt, msg=None, msgFunc=None, delay=0.5,
                 follow=True):
        self.wdgt = wdgt
        self.parent = self.wdgt.master
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        self.withdraw()
        self.overrideredirect(True)
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        self.msg = tk.Message(self, textvariable=self.msgVar, bg=_bgcolor,
                   fg=_fgcolor, font="TkTooltipFont",
                   aspect=1000)
        self.msg.grid()
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')
    def spawn(self, event=None):
        self.visible = 1
        self.after(int(self.delay * 1000), self.show)
    def show(self):
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()
    def move(self, event):
        self.lastMotion = time()
        if self.follow is False:
            self.withdraw()
            self.visible = 1
        self.geometry('+%i+%i' % (event.x_root + 20, event.y_root - 10))
        try:
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)
    def hide(self, event=None):
        self.visible = 0
        self.withdraw()
    def update(self, msg):
        self.msgVar.set(msg)
    def configure(self, **kwargs):
        backgroundset = False
        foregroundset = False
        # Get the current tooltip text just in case the user doesn't provide any.
        current_text = self.msgVar.get()
        # to clear the tooltip text, use the .update method
        if 'debug' in kwargs.keys():
            debug = kwargs.pop('debug', False)
            if debug:
                for key, value in kwargs.items():
                    print(f'key: {key} - value: {value}')
        if 'background' in kwargs.keys():
            background = kwargs.pop('background')
            backgroundset = True
        if 'bg' in kwargs.keys():
            background = kwargs.pop('bg')
            backgroundset = True
        if 'foreground' in kwargs.keys():
            foreground = kwargs.pop('foreground')
            foregroundset = True
        if 'fg' in kwargs.keys():
            foreground = kwargs.pop('fg')
            foregroundset = True

        fontd = kwargs.pop('font', None)
        if 'text' in kwargs.keys():
            text = kwargs.pop('text')
            if (text == '') or (text == "\n"):
                text = current_text
            else:
                self.msgVar.set(text)
        reliefd = kwargs.pop('relief', 'flat')
        justifyd = kwargs.pop('justify', 'left')
        padxd = kwargs.pop('padx', 1)
        padyd = kwargs.pop('pady', 1)
        borderwidthd = kwargs.pop('borderwidth', 2)
        wid = self.msg      # The message widget which is the actual tooltip
        if backgroundset:
            wid.config(bg=background)
        if foregroundset:
            wid.config(fg=foreground)
        wid.config(font=fontd)
        wid.config(borderwidth=borderwidthd)
        wid.config(relief=reliefd)
        wid.config(justify=justifyd)
        wid.config(padx=padxd)
        wid.config(pady=padyd)
#                   End of Class ToolTip

def start_up():
    J2P_support.main()

if __name__ == '__main__':
    J2P_support.main()




